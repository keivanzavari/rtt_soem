diff --git a/CMakeLists.txt b/CMakeLists.txt
index 39bf21f..5458fd4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,11 @@
 cmake_minimum_required(VERSION 2.8.4)
 set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules")
-project(SOEM C)
+
+# At places where the original CMakeLists is modified, 
+# you'll find a small description
+
+# project name changed from SOEM C to lower case to be consistent with catkin 
+project(soem)
 
 if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
   # Default to installing in SOEM source directory
@@ -53,17 +58,32 @@ file(GLOB SOEM_HEADERS soem/*.h)
 file(GLOB OSAL_HEADERS osal/osal.h osal/${OS}/*.h)
 file(GLOB OSHW_HEADERS oshw/${OS}/*.h)
 
+# How to link static library with cmake in 64bit linux:
+# By enabling Position Independent Code (PIC, with the flag -fPIC) 
+# you can ensure the code remains share-able. PIC means that the output binary 
+# does not expect to be loaded at a particular base address, but is happy 
+# being put anywhere in memory
+# read here: 
+# https://www.technovelty.org/c/position-independent-code-and-x86-64-libraries.html
+add_definitions(-fPIC)
+
 include_directories(soem)
 include_directories(osal)
 include_directories(osal/${OS})
 include_directories(oshw/${OS})
 
+
+# export include and libraries...
+catkin_package(INCLUDE_DIRS soem osal osal/${OS} oshw/${OS}
+              LIBRARIES soem)
+
 add_library(soem STATIC
   ${SOEM_SOURCES}
   ${OSAL_SOURCES}
   ${OSHW_SOURCES}
   ${OSHW_EXTRA_SOURCES})
-target_link_libraries(soem ${OS_LIBS})
+# link to catkin libraries
+target_link_libraries(soem ${OS_LIBS} ${catkin_LIBRARIES})
 
 message("LIB_DIR: ${SOEM_LIB_INSTALL_DIR}")
 
